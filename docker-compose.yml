# ============================================================================
# EXTENSION FIELDS (FOR REUSABLE CONFIGS)
# ============================================================================
x-django-service: &django-service
  build:
    context: ./backend
    dockerfile: Dockerfile
  env_file: [ .env ]
  volumes:
    - ./backend:/app
  depends_on:
    timescaledb: { condition: service_healthy }
    redis: { condition: service_healthy }
  networks: [ portfolio_network ]
  restart: "no"

x-superset-service: &superset-service
  build:
    context: ./superset
    dockerfile: Dockerfile
  env_file: [ .env ]
  environment:
    # PostgreSQL connection for Superset metadata database
    DATABASE_USER: ${POSTGRES_USER}
    DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    DATABASE_HOST: timescaledb
    DATABASE_DB: superset_db
    # Redis connection
    REDIS_HOST: redis
    REDIS_PORT: ${REDIS_PORT:-6379}
    # Superset configuration
    SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-superset-secret-key-change-in-production-2024}
    PYTHONPATH: /app/pythonpath
    SUPERSET_CONFIG_PATH: /app/pythonpath/superset_config.py
  volumes:
    - ./superset/superset_config.py:/app/pythonpath/superset_config.py
  depends_on:
    timescaledb: { condition: service_healthy }
    redis: { condition: service_healthy }
  networks: [ portfolio_network ]
  restart: "no"

# ============================================================================
# SERVICES
# ============================================================================
services:
  # ----------------------------------------------------------------------------
  # SHARED INFRASTRUCTURE
  # ----------------------------------------------------------------------------
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: portfolio_timescaledb
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports: [ "${POSTGRES_PORT}:5432" ]
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks: [ portfolio_network ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "no"

  redis:
    image: redis:7-alpine
    container_name: portfolio_redis
    ports: [ "${REDIS_PORT}:6379" ]
    volumes: [ redis_data:/data ]
    networks: [ portfolio_network ]
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "no"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: portfolio_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports: [ "${PGADMIN_PORT}:80" ]
    volumes: [ pgadmin_data:/var/lib/pgadmin ]
    depends_on: [ timescaledb ]
    networks: [ portfolio_network ]
    restart: "no"

  # ----------------------------------------------------------------------------
  # DJANGO BACKEND
  # ----------------------------------------------------------------------------
  django:
    <<: *django-service
    container_name: portfolio_django
    ports: [ "${DJANGO_PORT}:8000" ]
    volumes:
      - ./backend:/app
      - django_static:/app/staticfiles
      - django_media:/app/media
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  celery_worker:
    <<: *django-service
    container_name: portfolio_celery_worker
    depends_on:
      django: { condition: service_healthy }
    command: celery -A portfolio_management worker --loglevel=info

  celery_beat:
    <<: *django-service
    container_name: portfolio_celery_beat
    depends_on:
      django: { condition: service_healthy }
    command: celery -A portfolio_management beat --loglevel=info

  # ----------------------------------------------------------------------------
  # APACHE AIRFLOW
  # ----------------------------------------------------------------------------
  airflow_webserver:
    image: apache/airflow:2.8.1
    container_name: portfolio_airflow_webserver
    env_file: [ .env ]
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://portfolio_user:portfolio_secure_password_2024@timescaledb:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ''
      # Connection environment variables
      AIRFLOW_CONN_TIMESCALEDB_CONN: 'postgres://portfolio_user:portfolio_secure_password_2024@timescaledb:5432/portfolio_db'
    ports: [ "${AIRFLOW_PORT}:8080" ]
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      timescaledb: { condition: service_healthy }
      airflow_init: { condition: service_completed_successfully }
    networks: [ portfolio_network ]
    command: webserver
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: "no"

  airflow_scheduler:
    image: apache/airflow:2.8.1
    container_name: portfolio_airflow_scheduler
    env_file: [ .env ]
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://portfolio_user:portfolio_secure_password_2024@timescaledb:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ''
      # Connection environment variables
      AIRFLOW_CONN_TIMESCALEDB_CONN: 'postgres://portfolio_user:portfolio_secure_password_2024@timescaledb:5432/portfolio_db'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      timescaledb: { condition: service_healthy }
      airflow_init: { condition: service_completed_successfully }
    networks: [ portfolio_network ]
    command: scheduler
    restart: "no"

  airflow_init:
    image: apache/airflow:2.8.1
    container_name: portfolio_airflow_init
    env_file: [ .env ]
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://portfolio_user:portfolio_secure_password_2024@timescaledb:5432/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__FERNET_KEY: ''
      # Connection environment variables
      AIRFLOW_CONN_TIMESCALEDB_CONN: 'postgres://portfolio_user:portfolio_secure_password_2024@timescaledb:5432/portfolio_db'
    depends_on:
      timescaledb: { condition: service_healthy }
    networks: [ portfolio_network ]
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --role Admin --username ${AIRFLOW_USERNAME:-admin} --password ${AIRFLOW_PASSWORD:-admin} --firstname Admin --lastname User --email admin@airflow.com || true &&
        airflow connections add 'timescaledb_conn' --conn-type 'postgres' --conn-host 'timescaledb' --conn-schema 'portfolio_db' --conn-login 'portfolio_user' --conn-password 'portfolio_secure_password_2024' --conn-port '5432' || true
      "
    restart: "no"

  # ----------------------------------------------------------------------------
  # APACHE SUPERSET
  # ----------------------------------------------------------------------------
  superset_init:
    <<: *superset-service
    container_name: portfolio_superset_init
    command: >
      sh -c "
        superset db upgrade &&
        superset fab create-admin --username ${SUPERSET_USERNAME} --firstname ${SUPERSET_FIRSTNAME} --lastname ${SUPERSET_LASTNAME} --email ${SUPERSET_EMAIL} --password ${SUPERSET_PASSWORD} &&
        superset init
      "
    restart: "no"

  superset_webserver:
    <<: *superset-service
    container_name: portfolio_superset_webserver
    ports: [ "${SUPERSET_PORT}:8088" ]
    depends_on:
      timescaledb: { condition: service_healthy }
      redis: { condition: service_healthy }
      superset_init: { condition: service_completed_successfully }
    command: superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger

  superset_worker:
    <<: *superset-service
    container_name: portfolio_superset_worker
    depends_on:
      timescaledb: { condition: service_healthy }
      redis: { condition: service_healthy }
      superset_init: { condition: service_completed_successfully }
    command: celery --app=superset.tasks.celery_app:app worker --pool=prefork -O fair -c 4

# ============================================================================
# VOLUMES & NETWORKS
# ============================================================================
volumes:
  timescaledb_data:
  pgadmin_data:
  redis_data:
  django_static:
  django_media:

networks:
  portfolio_network:
    driver: bridge