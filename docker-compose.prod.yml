version: '3.8'

# ============================================================================
# SIMPLIFIED PRODUCTION DOCKER COMPOSE
# Shared PostgreSQL (TimescaleDB) and Redis for all services
# With Airflow Scheduler enabled for automated DAG execution
# ============================================================================

services:
  # ============================================================================
  # SHARED INFRASTRUCTURE
  # ============================================================================
  
  # Shared TimescaleDB (PostgreSQL with TimescaleDB extension)
  # Used by: Django, Airflow, Superset
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: portfolio_timescaledb
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./init-scripts/init-timescaledb.sql:/docker-entrypoint-initdb.d/01-init-timescaledb.sql
      - ./init-scripts/init-airflow-db.sql:/docker-entrypoint-initdb.d/02-init-airflow.sql
      - ./init-scripts/init-superset-db.sql:/docker-entrypoint-initdb.d/03-init-superset.sql
    networks:
      - portfolio_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Shared Redis
  # Used by: Django/Celery, Airflow, Superset
  redis:
    image: redis:7-alpine
    container_name: portfolio_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    restart: always
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # ADMIN TOOLS
  # ============================================================================

  # PGAdmin4 for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: portfolio_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - timescaledb
    networks:
      - portfolio_network
    restart: always

  # ============================================================================
  # DJANGO BACKEND
  # ============================================================================

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio_django
    env_file:
      - .env
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    ports:
      - "${DJANGO_PORT}:8000"
    volumes:
      - ./backend:/app
      - django_static:/app/staticfiles
      - django_media:/app/media
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: always
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn portfolio_management.wsgi:application --bind 0.0.0.0:8000 --workers 4"

  # Celery Worker for Django
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio_celery_worker
    env_file:
      - .env
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: always
    command: celery -A portfolio_management worker --loglevel=info --concurrency=4

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio_celery_beat
    env_file:
      - .env
    environment:
      - DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: always
    command: celery -A portfolio_management beat --loglevel=info

  # ============================================================================
  # APACHE AIRFLOW (Production Mode - With Scheduler)
  # ============================================================================

  # Apache Airflow - Webserver
  airflow_webserver:
    image: apache/airflow:2.8.1
    container_name: portfolio_airflow_webserver
    environment:
      # Use LocalExecutor for simplicity (scheduler runs tasks directly)
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      # Connect to shared TimescaleDB
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'false'
      AIRFLOW__WEBSERVER__RBAC: 'true'
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}
      _AIRFLOW_WWW_USER_EMAIL: ${AIRFLOW_EMAIL}
      _AIRFLOW_WWW_USER_FIRSTNAME: ${AIRFLOW_FIRSTNAME}
      _AIRFLOW_WWW_USER_LASTNAME: ${AIRFLOW_LASTNAME}
      # API Keys for data sources
      FRED_API_KEY: ${FRED_API_KEY}
      BLS_API_KEY: ${BLS_API_KEY}
      EIA_API_KEY: ${EIA_API_KEY}
      NASDAQ_API_KEY: ${NASDAQ_API_KEY}
    ports:
      - "${AIRFLOW_PORT}:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow_data:/opt/airflow
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: always
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Airflow - Scheduler (ENABLED in Production)
  airflow_scheduler:
    image: apache/airflow:2.8.1
    container_name: portfolio_airflow_scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow_db
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 30
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 60
      AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'false'
      # API Keys for data sources
      FRED_API_KEY: ${FRED_API_KEY}
      BLS_API_KEY: ${BLS_API_KEY}
      EIA_API_KEY: ${EIA_API_KEY}
      NASDAQ_API_KEY: ${NASDAQ_API_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow_data:/opt/airflow
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: always
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================================================
  # APACHE SUPERSET (Optional)
  # ============================================================================

  # Apache Superset - Init (one-time setup)
  superset_init:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: portfolio_superset_init
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_CONFIG_PATH: /app/superset_config.py
      DATABASE_DB: superset_db
      DATABASE_HOST: timescaledb
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: ${POSTGRES_USER}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./superset/superset_config.py:/app/superset_config.py
      - superset_data:/app/superset_home
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - portfolio_network
    command: >
      sh -c "
        superset db upgrade &&
        superset fab create-admin --username ${SUPERSET_USERNAME} --firstname ${SUPERSET_FIRSTNAME} --lastname ${SUPERSET_LASTNAME} --email ${SUPERSET_EMAIL} --password ${SUPERSET_PASSWORD} &&
        superset init
      "

  # Apache Superset - Webserver
  superset_webserver:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: portfolio_superset_webserver
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_CONFIG_PATH: /app/superset_config.py
      DATABASE_DB: superset_db
      DATABASE_HOST: timescaledb
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: ${POSTGRES_USER}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "${SUPERSET_PORT}:8088"
    volumes:
      - ./superset/superset_config.py:/app/superset_config.py
      - superset_data:/app/superset_home
    depends_on:
      - superset_init
    networks:
      - portfolio_network
    restart: always
    command: gunicorn --bind 0.0.0.0:8088 --workers 4 --timeout 120 --limit-request-line 0 --limit-request-field_size 0 "superset.app:create_app()"

  # Apache Superset - Worker
  superset_worker:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: portfolio_superset_worker
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SUPERSET_CONFIG_PATH: /app/superset_config.py
      DATABASE_DB: superset_db
      DATABASE_HOST: timescaledb
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: ${POSTGRES_USER}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./superset/superset_config.py:/app/superset_config.py
      - superset_data:/app/superset_home
    depends_on:
      - superset_init
    networks:
      - portfolio_network
    restart: always
    command: celery --app=superset.tasks.celery_app:app worker --pool=prefork -O fair -c 4

volumes:
  timescaledb_data:
  pgadmin_data:
  redis_data:
  django_static:
  django_media:
  airflow_data:
  superset_data:

networks:
  portfolio_network:
    driver: bridge
